# !venv/bin/python
import heapq
import random
from datetime import datetime, timedelta
import logging
import re

import networkx as nx

from aiogram.types import CallbackQuery
from apscheduler.triggers.cron import CronTrigger

import conf
import ioF

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, executor, types

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=conf.TOKEN, parse_mode='HTML')
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(filename='tbot.log', level=logging.DEBUG)
# logging.basicConfig(level=logging.INFO)
test_chat_users = ioF.read_arr(conf.USERS)
avesta_chat_users = ioF.read_arr('avesta.json')
squad_chat_users = ioF.read_arr('squad.json')

divs = -1001894163066

squad = -1001856769942
print(datetime.now())

G = nx.Graph()
G.add_edges_from(conf.EDGES)


kp = types.InlineKeyboardMarkup()
btn_1 = types.InlineKeyboardButton(text='–ò–¥—É', callback_data='btn_yep')
btn_2 = types.InlineKeyboardButton(text='–ù–µ –∏–¥—É', callback_data='btn_no')
kp.add(btn_1, btn_2)

bosses = {}

if ioF.read_list(conf.BOSSES) == {}:
    bosses = {"5": "–ì–∞–≤–≥–æ–Ω–∞ ", "10": "–ü–∏–¥—Ä–∞ ", "15": "–ú–∏–Ω–æ—Ö—É—è–≤—Ä ", "20": "–ü–∏–¥–∞—Ä–º–æ—Ç ",
              "25": "–¶–µ—Ä–µ–±–µ—Ä ", "30": "–¢–∏–ª–∏—Ñ–æ–Ω ", "40": "–ü–∏—Ä–î—É—Ö –°–∏–Ω–¥–∞—Ä–∞", "50": "–ù–µ–º–µ–ø–∏–¥—Ä–∞ "}
else:
    bosses = ioF.read_list(conf.BOSSES)

droids = "droids.join"
bosses_d = {}

if ioF.read_list(droids) == {}:
    bosses_d = {"5": "–ì–æ—Ä–≥–æ–Ω–∞ ", "10": "–ì–∏–¥—Ä–∞ ", "15": "–ú–∏–Ω–æ—Ç–∞–≤—Ä ", "20": "–ü–∏—Ä–∞–≥–º–æ–Ω ",
              "25": "–¶–µ—Ä–±–µ—Ä ", "30": "–¢–∏—Ñ–æ–Ω ", "40": "–î—É—Ö –°–∏–Ω–¥–∞—Ä–∞", "50": "–ù–µ–º–µ–∑–∏–¥–∞ "}
else:
    bosses_d = ioF.read_list(droids)

def get_username(name, user_id):
    return "[" + name + "](tg://user?id=" + str(user_id) + ")"


def stock_helper(msg_text):
    wear = re.findall(r'/give\d{3,}', msg_text)
    potns = re.findall(r'/give_potion_\d{3,}', msg_text)
    resc = re.findall(r'/give_resource_\d{3,}', msg_text)

    print(wear, potns, resc)


async def only_send_msg_to_chat(chat_id, message, chat_users):
    i = 0
    temp = message + ' '
    for user in chat_users:
        #member = await bot.get_chat_member(chat_id, user)

        temp += get_username("–∫–æ—Ç–µ–∫", user) + ' '
        if i == 4:
            await bot.send_message(chat_id, f"{temp}", parse_mode="Markdown")
            temp = message + ' '
            i = 0
        else:
            i += 1
    if temp != (message + ' '):
        await bot.send_message(chat_id, f"{temp}", parse_mode="Markdown")


@scheduler.scheduled_job(CronTrigger.from_crontab('5,25,45 7-10,12-19,21-23,0-1 * * *'))
async def shed():
    await bot.send_message(conf.CHAT, "‚åõ<i>Ô∏è–¢–∏–∫</i>", parse_mode="HTML")
    await bot.send_message(divs, "‚åõÔ∏è<i>–¢–∏–∫</i>", parse_mode="HTML")
    await bot.send_message(squad, "–¢–∏–∫")


async def boss_5lvl_pre():
    await bot.send_message(conf.CHAT, "–ë–æ—Å—Å –ì–æ—Ä–≥–æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")


async def boss_5lvl_call():
    await bot.send_message(conf.ME, "–ë–æ—Å—Å –ì–æ—Ä–≥–æ–Ω–∞ –ø–æ—è–≤–∏–ª—Å—è")


async def boss_10lvl_pre():
    await bot.send_message(conf.CHAT, "–ë–æ—Å—Å –ì–∏–¥—Ä–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")


async def boss_10lvl_call():
    await bot.send_message(conf.CHAT, "–ë–æ—Å—Å –ì–∏–¥—Ä–∞ –ø–æ—è–≤–∏–ª—Å—è")


async def arena():
    await bot.send_message(conf.CHAT, "–ê—Ä–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π")
    await bot.send_message(divs, "–ê—Ä–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π")
    await bot.send_message(squad, "–ê—Ä–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π")


async def arena_closed():
    await bot.send_message(conf.CHAT, "–ê—Ä–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    await bot.send_message(divs, "–ê—Ä–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    await bot.send_message(squad, "–ê—Ä–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞")


async def battle_start():
    await bot.send_message(conf.CHAT, "–ë–∏—Ç–≤–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –Ω–∞—á–∞–ª–∞—Å—å")
    await bot.send_message(divs, "–ë–∏—Ç–≤–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –Ω–∞—á–∞–ª–∞—Å—å")
    await bot.send_message(squad, "–ë–∏—Ç–≤–∞ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –Ω–∞—á–∞–ª–∞—Å—å")


async def battle_ping():
    msg = await bot.send_message(conf.CHAT, "–î–æ –±–∏—Ç–≤—ã –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç")
    await bot.send_message(divs, "–î–æ –±–∏—Ç–≤—ã –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç")
    await bot.send_message(squad, "–î–æ –±–∏—Ç–≤—ã –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç")
    await only_send_msg_to_chat(conf.CHAT, '–ù–µ —Å–ø–∞—Ç—å ', test_chat_users)
    await only_send_msg_to_chat(divs, '–ù–µ —Å–ø–∞—Ç—å ', avesta_chat_users)
    await bot.send_message(divs, "<b>–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ —á–≤?</b> \n", parse_mode="HTML", reply_markup=kp)
    await bot.send_message(conf.CHAT, "<b>–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ —á–≤</b>? \n", parse_mode="HTML", reply_markup=kp)



# await only_send_msg_to_chat(squad, '–ù–µ —Å–ø–∞—Ç—å ', squad_chat_users)


@scheduler.scheduled_job(CronTrigger.from_crontab('0,20,40 7-10,12-19,21-23,0-1 * * *'))
async def shed_five():
    msg = await bot.send_message(conf.CHAT, "‚è≥<i>–¢–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</i>", parse_mode="HTML")
    await bot.send_message(divs, "‚è≥<i>–¢–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç</i>", parse_mode="HTML")
    await bot.send_message(squad, "–¢–∏–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
    # await only_send_msg_to_chat(conf.CHAT, '5 –º–∏–Ω—É—Ç –¥–æ —Ç–∏–∫–∞', test_chat_users)


def get_username(name, user_id):
    return "[" + name + "](tg://user?id=" + str(user_id) + ")"

    # writing userlist into json file


def get_event_times():
    msg = "üìÜ<b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüìÜ</b>\n"
    war_time_2 = timedelta(hours=20, minutes=0, seconds=0)
    war_time_1 = timedelta(hours=11, minutes=0, seconds=0)
    arena_time = timedelta(hours=16, minutes=0, seconds=0)
    curr = datetime.now()
    check = curr
    check = check - war_time_1
    if curr.day != check.day:
        hr = 10 - curr.hour
        mn = 59 - curr.minute
        sc = 59 - curr.second
        msg += "‚õà<b>–£—Ç—Ä–µ–Ω–Ω–µ–µ —á–≤ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑</b><code>" + f' {hr}:{mn}:{sc}' + "\n</code>"

    check = curr
    check -= arena_time
    if curr.day != check.day:
        hr = 15 - curr.hour
        mn = 59 - curr.minute
        sc = 59 - curr.second
        msg += "üèü<b>–ê—Ä–µ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑</b><code>" + f' {hr}:{mn}:{sc}' + "\n</code>"

    check = curr
    check -= war_time_2
    if curr.day != check.day:
        hr = 19 - curr.hour
        mn = 59 - curr.minute
        sc = 59 - curr.second
        msg += "‚õà<b>–í–µ—á–µ—Ä–Ω–µ–µ —á–≤ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑</b><code>" + f' {hr}:{mn}:{sc}</code>'

    else:
        msg += "üîö<b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç</b>"

    return msg


async def send_and_pin_msg_to_chat(chat_id, message, chat_name, chat_users):
    if message.reply_to_message:
        msg = await bot.send_message(chat_id, message.reply_to_message.text)
        await bot.pin_chat_message(chat_id, msg.message_id)
        # await bot.send_message(conf.PIN, 'Sended and pinned to'+chat_name)
        i = 0
        temp = ''
        for user in chat_users:
            if i < 5:
                temp += get_username('–∫–æ—Ç–µ–∫ ', user)
                await bot.send_message(user, message.reply_to_message.text)
                i += 1
            else:
                await bot.send_message(message.chat.id, f"{temp}", parse_mode="Markdown")
                temp = ''
                i = 0


def build_graph(edges):
    graph = {}
    for src, dest in edges:
        if src not in graph:
            graph[src] = []
        graph[src].append(dest)
    return graph


def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor in graph.get(current_node, []):
            distance = current_distance + 1  # –í–µ—Å –≤—Å–µ—Ö —Ä–µ–±–µ—Ä —Å—á–∏—Ç–∞–µ–º —Ä–∞–≤–Ω—ã–º–∏ 1
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances


graph = conf.EDGES


# –î–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ä—à–∏–Ω, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–µ–π
# –∏ –Ω–µ–ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö

def get_bound(g, v, path):
    r = []
    for pair, _ in g:
        if (v in pair):
            if v == pair[0]:
                q = pair[1]
            else:
                q = pair[0]
            if not (q in path):
                r.append(q)
    return r


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞—Ä–∫–∞—Å–æ–≤ –≥—Ä–∞—Ñ–∞,
# –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –≤ c—Ç–∞—Ä—Ç–æ–≤–æ–π –≤–µ—Ä—à–∏–Ω–µ

def all_paths(graph, start, pth, stk, res):
    bounds = get_bound(graph, start, pth)

    if len(bounds) > 0:
        for v in bounds:
            all_paths(graph, v, [v, start] + pth, [v] + stk, res)
    else:
        if len(stk) == 0:
            res.append(pth[-1::-1])
        else:
            all_paths(graph, stk[0], pth, stk[1:], res)
    return res


# –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –≤ —Ñ–∏–Ω–∏—à–Ω—É—é –≤–µ—Ä—à–∏–Ω—É

def search_path(tree, start, fin):
    q = fin
    res = []

    while True:
        k = tree.index(q)
        p = tree[k - 1]

        res = [(p, q)] + res

        if p == start:
            return res

        q = p


# –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É –ø—É—Ç–∏

def length_path(graph, pth):
    s = 0
    for pair in pth:
        rpair = (pair[1], pair[0])
        s += graph.get(pair, 0) + graph.get(rpair, 0)
    return s


# –ü–∞—Ä–∞–¥–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

def task(graph, start, fin):
    all_pth = all_paths(graph, start, [], [start], [])

    shortest_path = search_path(graph[0], start, fin)
    shortest_len = length_path(graph, shortest_path)

    for pth in all_pth[1:]:

        path = search_path(pth, start, fin)
        length = length_path(graph, path)

        if length < shortest_len:
            shortest_len = length
            shortest_path = path

    return shortest_path, shortest_len


def shortest_path(graph, node1, node2):
    path_list = [[node1]]
    path_index = 0
    # To keep track of previously visited nodes
    previous_nodes = {node1}
    if node1 == node2:
        return path_list[0]

    while path_index < len(path_list):
        current_path = path_list[path_index]
        last_node = current_path[-1]
        next_nodes = graph[last_node]
        # Search goal node
        if node2 in next_nodes:
            current_path.append(node2)
            return current_path
        # Add new paths
        for next_node in next_nodes:
            if not next_node in previous_nodes:
                new_path = current_path[:]
                new_path.append(next_node)
                path_list.append(new_path)
                # To avoid backtracking
                previous_nodes.add(next_node)
        # Continue to next path in list
        path_index += 1
    # No path is found
    return []



trig_pairs = ioF.read_list(conf.TRIGS)
trig_pairs["check"] = "done"

trig_avesta = ioF.read_list('avesta_trigs.json')
trig_avesta["check"] = "done"

trig_squad = ioF.read_list('squad_trigs.json')
trig_squad["check"] = "done"

# f_tick_job = scheduler.add_job(shed, "cron", minute=5)
# t_tick_job = scheduler.add_job(shed, "cron", minute=25)
# fh_tick_job = scheduler.add_job(shed, "cron", minute=45)
# z_tick_job = scheduler.add_job(shed_five, "cron", minute=0)
# tz_tick_job = scheduler.add_job(shed_five, "cron", minute=20)
# fz_tick_job = scheduler.add_job(shed_five, "cron", minute=40)

scheduler.add_job(arena, "cron", hour=16)
scheduler.add_job(arena_closed, "cron", hour=17)
scheduler.add_job(battle_ping, "cron", hour=10, minute=45)
scheduler.add_job(battle_start, "cron", hour=11)
scheduler.add_job(battle_ping, "cron", hour=19, minute=45)
scheduler.add_job(battle_start, "cron", hour=20)


@dp.channel_post_handler()
async def chanel_checker(message: types.Message):
    global bosses

    if message.chat.id == -1001340977257:
        # print('olo')

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–æ—Ä–≥–æ–Ω–∞ üéñ5 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            await bot.forward_message(divs, -1001340977257, message.message_id)


        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–∏–¥—Ä–∞ üéñ10 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            await bot.forward_message(divs, -1001340977257, message.message_id)


        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ú–∏–Ω–æ—Ç–∞–≤—Ä üéñ15 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            await bot.forward_message(divs, -1001340977257, message.message_id)


        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ü–∏—Ä–∞–≥–º–æ–Ω üéñ20 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            await bot.forward_message(divs, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¶–µ—Ä–±–µ—Ä üéñ25 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¢–∏—Ñ–æ–Ω üéñ30 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –î—É—Ö –°–∏–Ω–¥–∞—Ä–∞ üéñ40 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ù–µ–º–µ–∑–∏–¥–∞ üéñ50 [–õ—é–¥–∏] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–æ—Ä–≥–æ–Ω–∞ üéñ5 [–õ—é–¥–∏] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=30, seconds=0)
            bosses[str(5)] = '*–ì–∞–≤–≥–æ–Ω–∞* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–∏–¥—Ä–∞ üéñ10 [–õ—é–¥–∏] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=45, seconds=0)
            bosses[str(10)] = '*–ü–∏–¥—Ä–∞* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ú–∏–Ω–æ—Ç–∞–≤—Ä üéñ15 [–õ—é–¥–∏] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=60, seconds=0)
            bosses[str(15)] = '*–ú–∏–Ω–æ—Ö—É—è–≤—Ä* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ü–∏—Ä–∞–≥–º–æ–Ω üéñ20 [–õ—é–¥–∏] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=75, seconds=0)
            bosses[str(20)] = '*–ü–∏–¥–∞—Ä–º–æ—Ç* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¶–µ—Ä–±–µ—Ä üéñ25 [–õ—é–¥–∏] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=90, seconds=0)
            bosses[str(25)] = '*–¶–µ—Ä–µ–±–µ—Ä* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¢–∏—Ñ–æ–Ω üéñ30 –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=120, seconds=0)
            bosses[str(30)] = '*–¢–∏–ª–∏—Ñ–æ–Ω* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –î—É—Ö –°–∏–Ω–¥–∞—Ä–∞ üéñ40 –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=120, seconds=0)
            bosses[str(40)] = '*–ü–∏—Ä–î—É—Ö –°–∏–Ω–¥–∞—Ä–∞* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ù–µ–º–µ–∑–∏–¥–∞ üéñ50 –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            data_msg = message.date + timedelta(minutes=120, seconds=0)
            bosses[str(50)] = '*–ù–µ–º–µ–ø–∏–¥—Ä–∞* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find("–Ω–∞—á–∞–ª –ø–æ–µ–¥–∏–Ω–æ–∫ —Å üåü –≠–ª–∏—Ç–Ω—ã–π:") != -1 and message.text.find("[–õ—é–¥–∏]") != -1:
            await bot.forward_message(conf.CHAT, -1001340977257, message.message_id)
            await bot.forward_message(divs, -1001340977257, message.message_id)
            # if message.text.find("–ú–∏–Ω–æ—Ç–∞–≤—Ä") or message.text.find("–ü–∏—Ä–∞–≥–º–æ–Ω"):

        await ioF.write_list({}, conf.BOSSES)
        await ioF.write_list(bosses, conf.BOSSES)
        
        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–æ—Ä–≥–æ–Ω–∞ üéñ5 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–∏–¥—Ä–∞ üéñ10 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ú–∏–Ω–æ—Ç–∞–≤—Ä üéñ15 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ü–∏—Ä–∞–≥–º–æ–Ω üéñ20 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¶–µ—Ä–±–µ—Ä üéñ25 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¢–∏—Ñ–æ–Ω üéñ30 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –î—É—Ö –°–∏–Ω–¥–∞—Ä–∞ üéñ40 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ù–µ–º–µ–∑–∏–¥–∞ üéñ50 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –≤–æ–∑—Ä–æ–∂–¥–µ–Ω –≤–Ω–æ–≤—å!') != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–æ—Ä–≥–æ–Ω–∞ üéñ5 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:

            data_msg = message.date + timedelta(minutes=30, seconds=0)
            bosses_d[str(5)] = '*–ì–æ—Ä–≥–æ–Ω–∞* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ì–∏–¥—Ä–∞ üéñ10 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:

            data_msg = message.date + timedelta(minutes=45, seconds=0)
            bosses_d[str(10)] = '*–ì–∏–¥—Ä–∞* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ú–∏–Ω–æ—Ç–∞–≤—Ä üéñ15 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:

            data_msg = message.date + timedelta(minutes=60, seconds=0)
            bosses_d[str(15)] = '*–ú–∏–Ω–æ—Ç–∞–≤—Ä* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –ü–∏—Ä–∞–≥–º–æ–Ω üéñ20 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:

            data_msg = message.date + timedelta(minutes=75, seconds=0)
            bosses_d[str(20)] = '*–ü–∏—Ä–∞–≥–º–æ–Ω* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'

        if message.text.find('üåü –≠–ª–∏—Ç–Ω—ã–π: –¶–µ—Ä–±–µ—Ä üéñ25 [–î—Ä–æ–∏–¥—ã] –±—ã–ª –ø–æ–≤–µ—Ä–∂–µ–Ω!') != -1:

            data_msg = message.date + timedelta(minutes=90, seconds=0)
            bosses_d[str(25)] = '*–¶–µ—Ä–±–µ—Ä* `' + str(data_msg.day) + "." + str(data_msg.month) + " " + str(
                data_msg.hour) + ':' + str(
                data_msg.minute) + ':' + str(data_msg.second) + '`'


        if message.text.find("–Ω–∞—á–∞–ª –ø–æ–µ–¥–∏–Ω–æ–∫ —Å üåü –≠–ª–∏—Ç–Ω—ã–π:") != -1 and message.text.find("[–î—Ä–æ–∏–¥—ã]") != -1:
            await bot.forward_message(squad, -1001340977257, message.message_id)

        await ioF.write_list({}, droids)
        await ioF.write_list(bosses_d, droids)

        # data_msg_full = message.date + datetime.timedelta(minutes=25, seconds=0)
        # data_msg_not_f = message.date + datetime.timedelta(minutes=5, seconds=1)
        # date_msg_fmin = datetime.datetime.now() + datetime.timedelta(minutes=5, seconds=1)
        #
        # print(data_msg.hour)
        # if data_msg >= datetime.datetime.now():
        #     if data_msg_not_f < date_msg_fmin:
        #         scheduler.add_job(boss_5lvl_call, "cron", year=data_msg.year, month=data_msg.month,
        #                           day=data_msg.day, week='*', day_of_week='*', hour=data_msg.hour,
        #                           minute=data_msg.minute, second=data_msg.second)
        #         scheduler.add_job(boss_5lvl_pre, "cron", year=data_msg_full.year, month=data_msg_full.month,
        #                           day=data_msg_full.day, week='*', day_of_week='*', hour=data_msg_full.hour,
        #                           minute=data_msg_full.minute, second=data_msg_full.second)
        #         boss_l5 = '–ì–æ—Ä–≥–æ–Ω–∞ ' + str(data_msg.hour) + ':' + str(
        #             data_msg.minute) + ':' + str(data_msg.second)
        #         await bot.send_message(conf.CHAT,
        #                                '–ë–æ—Å—Å –ì–æ—Ä–≥–æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ' + str(data_msg.hour) + ':' + str(
        #                                    data_msg.minute) + ':' + str(data_msg.second))
        #
        # else:
        #     scheduler.add_job(boss_5lvl_call, "cron", year=data_msg.year, month=data_msg.month,
        #                       day=data_msg.day, week='*', day_of_week='*', hour=data_msg.hour,
        #                       minute=data_msg.minute, second=data_msg.second)
        #     boss_l5 = '–ì–æ—Ä–≥–æ–Ω–∞ ' + str(data_msg.hour) + ':' + str(
        #         data_msg.minute) + ':' + str(data_msg.second)
        #     await bot.send_message(conf.CHAT,
        #                            '–ë–æ—Å—Å –ì–æ—Ä–≥–æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ' + str(data_msg.hour) + ':' + str(
        #                                data_msg.minute) + ':' + str(data_msg.second))
        # data_msg_full = message.date + datetime.timedelta(minutes=40, seconds=0)
        # data_msg_not_f = message.date + datetime.timedelta(minutes=5, seconds=1)
        # date_msg_fmin = datetime.datetime.now() + datetime.timedelta(minutes=5, seconds=1)
        # print(data_msg.hour)
        # if data_msg >= datetime.datetime.now():
        #     if data_msg_not_f < date_msg_fmin:
        #         scheduler.add_job(boss_10lvl_call, "cron", year=data_msg.year, month=data_msg.month,
        #                           day=data_msg.day, week='*', day_of_week='*', hour=data_msg.hour,
        #                           minute=data_msg.minute, second=data_msg.second)
        #         scheduler.add_job(boss_10lvl_pre, "cron", year=data_msg_full.year,
        #                           month=data_msg_full.month,
        #                           day=data_msg_full.day, week='*', day_of_week='*', hour=data_msg_full.hour,
        #                           minute=data_msg_full.minute, second=data_msg_full.second)
        #         boss_l10= '–ì–∏–¥—Ä–∞ ' + str(data_msg.hour) + ':' + str(
        #             data_msg.minute) + ':' + str(data_msg.second)
        #         await bot.send_message(conf.CHAT,
        #                                '–ë–æ—Å—Å –ì–∏–¥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ' + str(data_msg.hour) + ':' + str(
        #                                    data_msg.minute) + ':' + str(data_msg.second))
        # else:
        #     scheduler.add_job(boss_10lvl_call, "cron", year=data_msg.year, month=data_msg.month,
        #                       day=data_msg.day, week='*', day_of_week='*', hour=data_msg.hour,
        #                       minute=data_msg.minute, second=data_msg.second)
        #     boss_l10 = '–ì–∏–¥—Ä–∞ ' + str(data_msg.hour) + ':' + str(
        #         data_msg.minute) + ':' + str(data_msg.second)
        #     await bot.send_message(conf.CHAT,
        #                            '–ë–æ—Å—Å –ì–∏–¥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ' + str(data_msg.hour) + ':' + str(
        #                                data_msg.minute) + ':' + str(data_msg.second))


@dp.message_handler()
async def cmd_test1(message: types.Message):
    logging.debug('into handler')
    tmp = ""
    tm_msg = ""
    boss_timing = "üåü *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–æ—Å—Å–æ–≤üåü *\n"

    if message.chat.id == divs:
        if message.text.lower() == '–µ–±–æ–±–æ—Å—ã' or message.text.lower() == '–ª–æ—Ö–∏' or message.text.lower() == '–ø–µ–¥–æ—Ä—ã' or message.text.lower() == '–µ–ª':
            for b in bosses.values():
                boss_timing += b + "\n"
            await bot.send_message(divs, boss_timing, parse_mode='Markdown')

        if message.left_chat_member:
            avesta_chat_users.remove(message.left_chat_member.id)
            await ioF.write_list(avesta_chat_users, 'avesta.json')

        if message.text.lower() == "test" and message.from_user.id == conf.ME:

            await bot.send_message(divs, "–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ —á–≤?", reply_markup=kp)
            #await bot.send_message(conf.CHAT, "–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ —á–≤?", reply_markup=kp)

        if ".–ø—É—Ç—å" in message.text.lower():
            temp_str = message.text.replace(".–ø—É—Ç—å ", "")
            await bot.delete_message(message.chat.id, message.message_id)
            path_t = temp_str.split("-")

            res = nx.dijkstra_path(G, path_t[0].lower(), path_t[1].lower())
            answ = "‚öîÔ∏è <code>–¢–æ—á–∫–∞:</code><b>" + path_t[1].upper() + "</b> \n\n"
            for v in res:
                answ += "<code>" + str(v) + "‚ÜíÔ∏è</code>"
            res = nx.dijkstra_path(G, "–±–ª", path_t[1].lower())
            answ += "\n\n‚öîÔ∏è<b> –ü—É—Ç—å —Å –±–∞–∑—ã: </b>\n\n"
            for v in res:
                answ += "<code>" + str(v) + "‚ÜíÔ∏è</code>"
            await bot.send_message(divs, answ, parse_mode="HTML")

        if (message.from_user.id == 329383372 or message.from_user.id == conf.ME) and ".–ø–µ—Ö" in message.text.lower():
            pinned_1 = ioF.read_id("av_pin.json")
            pinned_2 = ioF.read_id("sil_pin.json")

            msg_text = message.text.replace(".–ø–µ—Ö", "")
            # msg_text = message.text.replace(".–ü–µ—Ö", "")
            msg_text = "‚ÄºÔ∏èüì° *\n" + msg_text + "*"
            await bot.delete_message(message.chat.id, message.message_id)
            msg_1 = await bot.send_message(divs, msg_text, parse_mode='Markdown')
            await ioF.write_list(msg_1.message_id, "av_pin.json")
            if pinned_1 != 0:
                try:
                    await bot.delete_message(divs, pinned_1)
                except:
                    print("message is not pinned")
            await bot.pin_chat_message(divs, msg_1.message_id)
            await bot.delete_message(divs, msg_1.message_id + 1)
            msg_2 = await bot.send_message(conf.CHAT, msg_text, parse_mode='Markdown')
            await ioF.write_list(msg_2.message_id, "sil_pin.json")
            if pinned_2 != 0:
                try:
                    await bot.delete_message(conf.CHAT, pinned_2)
                except:
                    print("message is not pinned")
            await bot.pin_chat_message(conf.CHAT, msg_2.message_id)
            await bot.delete_message(conf.CHAT, msg_2.message_id + 1)

        if message.text.lower() == '—Å–æ–±—ã—Ç–∏—è':
            await bot.send_message(divs, get_event_times())

        if message.text.lower() == '–∞–≤–µ—Å—Ç–∞':
            await bot.send_message(divs, "–™—É–™!")

        if message.text.lower() == '–≥–æ–ª–∞—Å':
            await bot.send_message(divs, 'üîäüêï*–≥–∞—û*', parse_mode='Markdown')
            await bot.send_message(conf.CHAT, 'üîäüêï*–≥–∞—û*', parse_mode='Markdown')

        if trig_avesta.get(message.text.lower()) is not None:
            await bot.send_message(divs, trig_avesta[message.text.lower()])

        if message.text.lower().find("t_add ") != -1 and message.reply_to_message:
            if message.reply_to_message.text:
                tmp = message.text
                tmp = tmp.replace("t_add ", "")
                tmp_msg = message.reply_to_message.text
                # print(1)
                trig_avesta[tmp.lower()] = tmp_msg
                await bot.send_message(divs, "added new trigger")

        if message.text.lower().find("t_del ") != -1:
            tmp = message.text
            tmp = tmp.replace("t_del ", "")
            if trig_avesta.get(tmp.lower()) is not None:
                trig_avesta.pop(tmp)
                await bot.send_message(divs, "trigger deleted")
            else:
                await bot.send_message(divs, "trigger not fund")

        if message.from_user.id not in avesta_chat_users:
            avesta_chat_users.append(message.from_user.id)
            await ioF.write_list(avesta_chat_users, 'avesta.json')

        if message.text.lower() == '@all':
            await only_send_msg_to_chat(divs, '–ê–ª–æ', avesta_chat_users)

        if message.text.find('iamdro') != -1:
            stick = 'CAACAgIAAxkBAAIEM2Td-mPIOhvNNYOFr34tU4YrNOV5AAIOAANEkYcaeGKCpnVCyMYwBA'
            await bot.send_sticker(divs, stick)

        if message.text.lower() == 'trigs':
            tmp = '__–¢—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞__:\n'
            for pairs in trig_avesta:
                tmp += str(pairs) + '\n'
            await bot.send_message(divs, tmp)
    await ioF.write_list(trig_avesta, 'avesta_trigs.json')


    if message.chat.id == conf.CHAT:
        # print(trig_pairs.get(message.text.lower()) is not None)
        if trig_pairs.get(message.text.lower()) is not None:
            await bot.send_message(conf.CHAT, trig_pairs[message.text.lower()])

        if message.text.lower() == '—Å–æ–±—ã—Ç–∏—è':
            await bot.send_message(conf.CHAT, get_event_times())

        if message.left_chat_member:
            test_chat_users.remove(message.left_chat_member.id)
            await ioF.write_list(test_chat_users, conf.USERS)

        if (message.from_user.id == 400453296 or message.from_user.id == conf.ME) and ".–ø–µ—Ö" in message.text.lower():
            pinned_1 = ioF.read_id("av_pin.json")
            pinned_2 = ioF.read_id("sil_pin.json")

            msg_text = message.text.replace(".–ø–µ—Ö", "")
            # msg_text = message.text.replace(".–ü–µ—Ö", "")
            msg_text = "‚ÄºÔ∏èüì° *\n" + msg_text + "*"
            await bot.delete_message(message.chat.id, message.message_id)
            msg_1 = await bot.send_message(divs, msg_text, parse_mode='Markdown')
            await ioF.write_list(msg_1.message_id, "av_pin.json")
            if pinned_1 != 0:
                try:
                    await bot.delete_message(divs, pinned_1)
                except:
                    print("message is not pinned")
            await bot.pin_chat_message(divs, msg_1.message_id)
            await bot.delete_message(divs, msg_1.message_id+1)
            msg_2 = await bot.send_message(conf.CHAT, msg_text, parse_mode='Markdown')
            await ioF.write_list(msg_2.message_id, "sil_pin.json")
            if pinned_2 != 0:
                try:
                    await bot.delete_message(conf.CHAT, pinned_2)
                except:
                    print("message is not pinned")
            await bot.pin_chat_message(conf.CHAT, msg_2.message_id)
            await bot.delete_message(conf.CHAT, msg_2.message_id + 1)

        if (message.from_user.id == 400453296 or message.from_user.id == conf.ME) and ".–ø—É—Ç—å" in message.text.lower():
            temp_str = message.text.replace(".–ø—É—Ç—å ", "")
            await bot.delete_message(message.chat.id, message.message_id)
            path_t = temp_str.split("-")
            res = nx.dijkstra_path(G, path_t[0].lower(), path_t[1].lower())
            answ = "‚öîÔ∏è <code>–¢–æ—á–∫–∞:</code><b>" + path_t[1].upper() + "</b> \n\n"
            for v in res:
                answ += "<code>" + str(v) + "‚Üí</code>Ô∏è"
            res = nx.dijkstra_path(G, "–±–ª", path_t[1].lower())
            answ += "\n\n‚öîÔ∏è<b> –ü—É—Ç—å —Å –±–∞–∑—ã: </b>\n\n"
            for v in res:
                answ += "<code>" + str(v) + "‚ÜíÔ∏è</code>"
            await bot.send_message(conf.CHAT, answ, parse_mode="HTML")


        if message.text.lower() == '–≥–æ–ª–∞—Å':
            await bot.send_message(divs, 'üîäüêï*–≥–∞—û*', parse_mode='Markdown')
            await bot.send_message(conf.CHAT, 'üîäüêï*–≥–∞—û*', parse_mode='Markdown')
            if random.randint(0, 100) < 50:
                stick = 'CAACAgIAAxkBAAIEM2Td-mPIOhvNNYOFr34tU4YrNOV5AAIOAANEkYcaeGKCpnVCyMYwBA'
                await bot.send_sticker(conf.CHAT, stick)

        if message.text.lower() == '–µ–±–æ–±–æ—Å—ã' or message.text.lower() == '–ª–æ—Ö–∏' or message.text.lower() == '–ø–µ–¥–æ—Ä—ã' or message.text.lower() == '–µ–ª':
            for b in bosses.values():
                boss_timing += b + "\n"
            await bot.send_message(conf.CHAT, boss_timing, parse_mode='Markdown')

        if message.text.lower().find("t_add ") != -1 and message.reply_to_message:
            if message.reply_to_message.text:
                tmp = message.text
                tmp = tmp.replace("t_add ", "")
                tmp_msg = message.reply_to_message.text
                # print(1)
                trig_pairs[tmp] = tmp_msg
                await bot.send_message(conf.CHAT, "added new trigger")

        if message.text.lower().find("t_del ") != -1:
            tmp = message.text
            tmp = tmp.replace("t_del ", "")
            if trig_pairs.get(tmp.lower()) is not None:
                trig_pairs.pop(tmp)
                await bot.send_message(conf.CHAT, "trigger deleted")
            else:
                await bot.send_message(conf.CHAT, "trigger not fund")

        if message.from_user.id not in test_chat_users:
            test_chat_users.append(message.from_user.id)
            await ioF.write_list(test_chat_users, conf.USERS)

        if message.text.lower() == '@all':
            await only_send_msg_to_chat(conf.CHAT, '–ê–ª–æ', test_chat_users)

        if message.text.lower() == '@frutell1s':
            img = 'AgACAgIAAxkBAAIEMWTd9S3JrHNO63jI9-uhRUZYqIHLAAIG1TEbAAGF8Up0jLyqsBgTpQEAAwIAA3gAAzAE'
            await bot.send_photo(conf.CHAT, img)


        if message.text.lower() == 'trigs':
            tmp = '__–¢—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞__:\n'
            for pairs in trig_pairs:
                tmp += str(pairs) + '\n'

        if message.text.lower().find('–¥–∞–π—Ç–µ—Å') != -1 and message.reply_to_message:
            if message.reply_to_message.text:
                admins = ioF.read_arr('asmins.json')
                await only_send_msg_to_chat(conf.CHAT,
                                            '–ê–ª–æ, –≤—ã–¥–∞–π—Ç–µ —Å–æ —Å–∫–ª–∞–¥–∞ __' + message.reply_to_message.text + '__', admins)

        adm = await message.bot.get_chat_member(conf.CHAT, message.from_user.id)
        if message.text.lower() == 'setadm' and message.reply_to_message and adm.status == 'administrator':
            admins = ioF.read_arr('asmins.json')
            if message.reply_to_message.from_user.id not in admins:
                admins.append(message.reply_to_message.from_user.id)
                await ioF.write_list(admins, 'asmins.json')
                await bot.send_message(conf.CHAT, get_username(message.reply_to_message.from_user.full_name,
                                                               message.reply_to_message.from_user.id) + " —Ç–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤",
                                       parse_mode="Markdown")
            else:
                await bot.send_message(conf.CHAT, "–¢—ã —á–æ, –¥—É—Ä–Ω–æ–π? –û–Ω —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
        elif message.text.lower() == 'setadm' and message.reply_to_message and adm.status != 'administrator':
            await bot.send_message(conf.CHAT, "C–∞—Å–∏ –∂–æ–ø—É —Ç—ã –Ω–µ –∞–¥–º–∏–Ω", )
            
    if message.chat.id == squad:
        if message.text.lower() == '–µ–±–æ–±–æ—Å—ã' or message.text.lower() == '–ª–æ—Ö–∏' or message.text.lower() == '–ø–µ–¥–æ—Ä—ã' or message.text.lower() == '–µ–ª':
            for b in bosses_d.values():
                boss_timing += b + "\n"
            await bot.send_message(squad, boss_timing, parse_mode='Markdown')

        if message.left_chat_member:
            squad_chat_users.remove(message.left_chat_member.id)
            await ioF.write_list(squad_chat_users, 'squad.json')

        if message.text.lower() == "test" and message.from_user.id == conf.ME:

            await bot.send_message(squad, "–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ —á–≤?", reply_markup=kp)
            #await bot.send_message(conf.CHAT, "–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ —á–≤?", reply_markup=kp)

        if ".–ø—É—Ç—å" in message.text.lower():
            temp_str = message.text.replace(".–ø—É—Ç—å ", "")
            await bot.delete_message(message.chat.id, message.message_id)
            path_t = temp_str.split("-")

            res = nx.dijkstra_path(G, path_t[0].lower(), path_t[1].lower())
            answ = "‚öîÔ∏è <code>–¢–æ—á–∫–∞:</code><b>" + path_t[1].upper() + "</b> \n\n"
            for v in res:
                answ += "<code>" + str(v) + "‚ÜíÔ∏è</code>"
            res = nx.dijkstra_path(G, "–±–ª", path_t[1].lower())
            answ += "\n\n‚öîÔ∏è<b> –ü—É—Ç—å —Å –±–∞–∑—ã: </b>\n\n"
            for v in res:
                answ += "<code>" + str(v) + "‚ÜíÔ∏è</code>"
            await bot.send_message(squad, answ, parse_mode="HTML")


        if message.text.lower() == '—Å–æ–±—ã—Ç–∏—è':
            await bot.send_message(squad, get_event_times())
            
        if message.text.lower() == 'squad0':
            await bot.send_message(squad, "–ú—ñ—Ü—å!")

        if message.text.lower() == '–∞–≤–µ—Å—Ç–∞':
            await bot.send_message(squad, "–™—É–™!")

        if message.text.lower() == '–≥–æ–ª–∞—Å':
            await bot.send_message(squad, 'üîäüêï*–≥–∞—û*', parse_mode='Markdown')

        if trig_squad.get(message.text.lower()) is not None:
            await bot.send_message(squad, trig_avesta[message.text.lower()])

        if message.text.lower().find("t_add ") != -1 and message.reply_to_message:
            if message.reply_to_message.text:
                tmp = message.text
                tmp = tmp.replace("t_add ", "")
                tmp_msg = message.reply_to_message.text
                # print(1)
                trig_squad[tmp.lower()] = tmp_msg
                await bot.send_message(squad, "added new trigger")

        if message.text.lower().find("t_del ") != -1:
            tmp = message.text
            tmp = tmp.replace("t_del ", "")
            if trig_squad.get(tmp.lower()) is not None:
                trig_squad.pop(tmp)
                await bot.send_message(squad, "trigger deleted")
            else:
                await bot.send_message(squad, "trigger not fund")

        if message.from_user.id not in squad_chat_users:
            squad_chat_users.append(message.from_user.id)
            await ioF.write_list(squad_chat_users, 'squad.json')

        if message.text.lower() == '@all':
            await only_send_msg_to_chat(squad, '–ê–ª–æ', squad_chat_users)

        if message.text.find('iamdro') != -1:
            stick = 'CAACAgIAAxkBAAIEM2Td-mPIOhvNNYOFr34tU4YrNOV5AAIOAANEkYcaeGKCpnVCyMYwBA'
            await bot.send_sticker(squad, stick)

        if message.text.lower() == 'trigs':
            tmp = '__–¢—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞__:\n'
            for pairs in trig_avesta:
                tmp += str(pairs) + '\n'
            await bot.send_message(squad, tmp)
    await ioF.write_list(trig_squad, 'squad_trigs.json')


    await ioF.write_list(trig_pairs, conf.TRIGS)
    if message.from_user.id == conf.ME:
        if message.text.lower() == '–¥–∞–π–∏–¥':
            await bot.send_message(message.chat.id, message.chat.id)

    if message.text.lower() == '—Ç–æ–ª—è':
        await bot.send_message(message.chat.id, '–ü–∏–¥–æ—Ä!')

    if message.from_user.id == conf.ME:
        if message.text.lower() == '–∞–ª–æ':
            await bot.send_message(message.chat.id, 'who-–µ–º –ø–æ –ª–±—É –Ω–µ –¥–∞–ª–æ?')

    if message.text.lower().find("—Å–∫–ª–∞–¥_") != -1:
        stock_helper(message.text)


# @dp.message_handler(user_id=conf.ME, content_types=["sticker"])
# async def get_img_id(message):
#     stick_id = message.sticker.file_id
#     await bot.send_message(message.chat.id, f"<b>–ò–î —Å—Ç–∏–∫–æ—Å–∞:</b>\n{stick_id}")


# @dp.message_handler(user_id=conf.ME, content_types=["photo"])
# async def get_img_id(message):
#     photo_id = message.photo[-1].file_id
#     await bot.send_message(message.chat.id, f"<b>–ò–î –∫–∞—Ä—Ç–∏–Ω–∫–∏:</b>\n{photo_id}")


@dp.callback_query_handler(lambda call: True)
async def back(callback: CallbackQuery):
    message = callback.message

    if callback.data == 'btn_yep' and callback.from_user.full_name not in message.text:
        await callback.message.edit_text(message.text + "\n" + callback.from_user.full_name, reply_markup=kp)
    else:
        await callback.answer()

    if callback.data == 'btn_no' and callback.from_user.full_name in message.text:
        lst = message.text.split("\n")
        lst.remove(callback.from_user.full_name)
        temp_text = ""
        for item in lst:
            temp_text += item + "\n"
        await callback.message.edit_text(temp_text, reply_markup=kp)
    else:
        await callback.answer()

    await callback.answer()

    #if call.data == 'btn_no':


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.debug('into exec')
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
    logging.debug('outto exec')
